package com.spring.common.services;

import com.spring.common.exceptions.TutorNotFoundException;
import com.spring.common.interfaces.TutorService;
import com.spring.dao.models.Tutee;
import com.spring.dao.models.Tutor;
import com.spring.dao.repositories.TuteeRepository;
import com.spring.dao.repositories.TutorRepository;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

/**
 * Service class for TutorService implementation
 */
@Service
public class TutorServiceImpl implements TutorService {

    private final TutorRepository tutorRepository;


    /**
     * Constructor method for service implementation class {@link TutorServiceImpl}
     *
     * @param tutorRepository tutor repository
     */
    public TutorServiceImpl(TutorRepository tutorRepository) {
        this.tutorRepository = tutorRepository;

    }

    /**
     * CRUD service method findAll()
     *
     * @return HashSet filled with Tutor objects
     */
    @Override
    public Set<Tutor> findAll() {
        return new HashSet<>(tutorRepository.findAll());
    }

    /**
     * CRUD Service method findById()
     *
     * @param aLong ID of instance of {@link Tutor}
     * @return returns instance of {@link Tutor} with provided ID
     */
    @Override
    public Tutor findById(Long aLong) {
        Optional<Tutor> optionalTutor = tutorRepository.findById(aLong);
        if (optionalTutor.isEmpty())
            throw new TutorNotFoundException();
        return optionalTutor.get();
    }

    /**
     * CRUD Service method save()
     *
     * @param tutor instance of {@link Tutor}
     * @return save Tutor instance to repository
     */
    @Override
    public Tutor save(Tutor tutor) {
        return tutorRepository.save(tutor);
    }

    /**
     * CRUD Service method delete()
     *
     * @param tutor instance of {@link Tutor}
     */
    @Override
    public void delete(Tutor tutor) {
        tutorRepository.delete(tutor);
    }

    /**
     * CRUD Service method deleteById()
     *
     * @param aLong ID of instance of {@link Tutor}
     */
    @Override
    public void deleteById(Long aLong) {
        tutorRepository.deleteById(aLong);
    }

    /**
     * CRUD Service method autogenerated by field 'email' in model {@link Tutor}
     *
     * @param email email of Tutor
     * @return instance of {@link Tutor} with corresponding email provided in parameter
     */
    @Override
    public Optional<Tutor> findByEmail(String email) {
        Optional<Tutor> tutor = tutorRepository.findByEmail(email);
        return tutor;


    }
}