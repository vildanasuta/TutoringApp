package com.spring.common.services;

import com.spring.common.exceptions.DiaryNotFoundException;
import com.spring.common.interfaces.CrudService;
import com.spring.common.interfaces.DiaryService;
import com.spring.dao.models.Answer;
import com.spring.dao.models.Diary;
import com.spring.dao.models.Tutee;
import com.spring.dao.repositories.DiaryRepository;
import com.spring.dao.repositories.TuteeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

/**
 * Service class for DiaryService implementation
 */
@Service
public class DiaryServiceImpl implements DiaryService, CrudService<Diary, Long> {

    private final DiaryRepository diaryRepository;

    /**
     * Constructor method for service implementation class {@link DiaryServiceImpl}
     *
     * @param diaryRepository diary repository
     */
    public DiaryServiceImpl(DiaryRepository diaryRepository) {
        this.diaryRepository = diaryRepository;
    }


    /**
     * CRUD service method findAll()
     *
     * @return HashSet filled with diaries
     */
    @Override
    public Set<Diary> findAll() {
        return new HashSet<>(diaryRepository.findAll());
    }

    /**
     * CRUD Service method findById()
     *
     * @param aLong ID of instance of {@link Diary}
     * @return returns instance of {@link Diary} with provided ID
     */
    @Override
    public Diary findById(Long aLong) {
        Optional<Diary> optionalDiary = diaryRepository.findById(aLong);
        if (optionalDiary.isEmpty())
            throw new DiaryNotFoundException();
        return optionalDiary.get();
    }

    /**
     * CRUD Service method save()
     *
     * @param diary instance of {@link Diary}
     * @return save Diary instance to repository
     */
    @Override
    public Diary save(Diary diary) {
        return diaryRepository.save(diary);
    }

    /**
     * CRUD Service method delete()
     *
     * @param diary instance of {@link Diary}
     */
    @Override
    public void delete(Diary diary) {
        diaryRepository.delete(diary);
    }

    /**
     * CRUD Service method deleteById()
     *
     * @param aLong ID of instance of {@link Diary}
     */
    @Override
    public void deleteById(Long aLong) {
        diaryRepository.deleteById(aLong);
    }

    /**
     * CRUD Service method autogenerated by field 'title' from model {@link Diary}
     *
     * @param title title of Diary
     * @return instance of {@link Diary} with same provided title
     */
    @Override
    public Diary findByTitle(String title) {
        return diaryRepository.findByTitle(title);
    }

    /**
     * CRUD Service method autogenerated by field 'title' from model {@link Diary}
     *
     * @param title title of Diary/partial title of Diary
     * @return list of instances of {@link Diary} with similar titles to the provided parameter
     */
    @Override
    public List<Diary> findByTitleLike(String title) {
        return diaryRepository.findByTitleLike(title);
    }


    /**
     * CRUD Service method autogenerated by field {@link Tutee} from model {@link Diary}
     *
     * @param id ID of {@link Tutee}
     * @return diary which corresponds to provided Tutee
     */
    @Override
    public Optional<Diary> findByTutee(Tutee id) {
        return diaryRepository.findByTutee(id);
    }

    /**
     * CRUD Service create()
     *
     * @param diary instance of {@link Diary}
     */
    @Override
    public void create(Diary diary) {
        diaryRepository.save(diary);
    }

    /**
     * Method to update current diary
     *
     * @param diary instance of {@link Diary}
     */
    @Override
    public void update(Diary diary) {
        Optional<Diary> optionalDiary = diaryRepository.findById(diary.getId());
        if (optionalDiary.isPresent()) {
            Diary existingDiary = optionalDiary.get();
            existingDiary.setTitle(diary.getTitle());
            existingDiary.setText(diary.getText());
            existingDiary.setDate(diary.getDate());
            existingDiary.setTutee(diary.getTutee());
            diaryRepository.save(existingDiary);
        }
    }
}