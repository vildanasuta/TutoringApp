package com.spring.common.services;

import com.spring.common.exceptions.TuteeNotFoundException;
import com.spring.common.interfaces.TuteeService;
import com.spring.dao.models.Tutee;
import com.spring.dao.models.TuteeModule;
import com.spring.dao.repositories.TuteeRepository;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

/**
 * Service class for TuteeService implementation
 */
@Service
public class TuteeServiceImpl implements TuteeService {

    private final TuteeRepository tuteeRepository;

    /**
     * Constructor method for service implementation class {@link TuteeServiceImpl}
     *
     * @param tuteeRepository tutee repository
     */
    public TuteeServiceImpl(TuteeRepository tuteeRepository) {
        this.tuteeRepository = tuteeRepository;
    }

    /**
     * CRUD service method findAll()
     *
     * @return HashSet filled with Tutee objects
     */
    @Override
    public Set<Tutee> findAll() {
        return new HashSet<>(tuteeRepository.findAll());
    }

    /**
     * CRUD Service method findById()
     *
     * @param aLong ID of instance of {@link Tutee}
     * @return returns instance of {@link Tutee} with provided ID
     */
    @Override
    public Tutee findById(Long aLong) {
        Optional<Tutee> optionalTutee = tuteeRepository.findById(aLong);
        if (optionalTutee.isEmpty())
            throw new TuteeNotFoundException();
        return optionalTutee.get();
    }

    /**
     * CRUD Service method save()
     *
     * @param tutee instance of {@link Tutee}
     * @return save Tutee instance to repository
     */
    @Override
    public Tutee save(Tutee tutee) {
        return tuteeRepository.save(tutee);
    }

    /**
     * CRUD Service method delete()
     *
     * @param tutee instance of {@link Tutee}
     */
    @Override
    public void delete(Tutee tutee) {
        tuteeRepository.delete(tutee);
    }

    /**
     * CRUD Service method deleteById()
     *
     * @param aLong ID of instance of {@link Tutee}
     */
    @Override
    public void deleteById(Long aLong) {
        tuteeRepository.deleteById(aLong);
    }

    /**
     * CRUD Service method autogenerated by field 'email' in model {@link Tutee}
     *
     * @param email email of Tutee
     * @return instance of {@link Tutee} with corresponding email provided in parameter
     */
    @Override
    public Optional<Tutee> findByEmail(String email) {
        Optional<Tutee> tutee = tuteeRepository.findByEmail(email);
        return tutee;


    }
}
