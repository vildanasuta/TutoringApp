package com.spring.common.services;

import com.spring.common.exceptions.ModuleNotFoundException;
import com.spring.common.interfaces.ModuleService;
import com.spring.dao.models.Diary;
import com.spring.dao.models.Module;
import com.spring.dao.repositories.ModuleRepository;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

/**
 * Service class for ModuleService implementation
 */
@Service
public class ModuleServiceImpl implements ModuleService {

    private final ModuleRepository moduleRepository;

    /**
     * Constructor method for service implementation class {@link ModuleServiceImpl}
     *
     * @param moduleRepository module repository
     */
    public ModuleServiceImpl(ModuleRepository moduleRepository) {
        this.moduleRepository = moduleRepository;
    }

    /**
     * CRUD service method findAll()
     *
     * @return HashSet filled with modules
     */
    @Override
    public Set<Module> findAll() {
        return new HashSet<>(moduleRepository.findAll());
    }

    /**
     * CRUD Service method findById()
     *
     * @param aLong ID of instance of {@link Module}
     * @return returns instance of {@link Module} with provided ID
     */
    @Override
    public Module findById(Long aLong) {
        Optional<Module> optionalModule = moduleRepository.findById(aLong);
        if (optionalModule.isEmpty())
            throw new ModuleNotFoundException();
        return optionalModule.get();
    }

    /**
     * CRUD Service method save()
     *
     * @param module instance of {@link Module}
     * @return save Module instance to repository
     */
    @Override
    public Module save(Module module) {
        return moduleRepository.save(module);
    }

    /**
     * CRUD Service method delete()
     *
     * @param module instance of {@link Module}
     */
    @Override
    public void delete(Module module) {
        moduleRepository.delete(module);
    }

    /**
     * CRUD Service method deleteById()
     *
     * @param aLong ID of instance of {@link Module}
     */
    @Override
    public void deleteById(Long aLong) {
        moduleRepository.deleteById(aLong);
    }

    /**
     * CRUD Service method autogenerated by field 'name' from model {@link Module}
     *
     * @param name name of Module
     * @return instance of {@link Module} with name as parameter provided
     */
    @Override
    public Module findByName(String name) {
        return moduleRepository.findByName(name);
    }

    /**
     * CRUD Service method autogenerated by field 'name' from model {@link Module}
     *
     * @param name name of Module/partial name of Module
     * @return list of instances of {@link Module} with similar name to the provided parameter
     */
    @Override
    public List<Module> findByNameLike(String name) {
        return moduleRepository.findByNameLike(name);
    }
}